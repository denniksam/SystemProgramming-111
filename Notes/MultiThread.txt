Многопоточность, разделение задачи на потоки

Некоторые задачи позволяют решать свои части параллельно, не дожидаясь
решения других частей. Другими словами, части задачи могут переставлены
местами. Например, задача расчета суммы (среднего) слагаемых, получаемых из разных
источников - курсы валют разных бирж/банков, метеоданных из разных зондов и т.п.

среднее = (А+В+С) / 3   ==> A+B+C = B+A+C = C+A+B = ...

        запрос____А
старт < запрос_В    > cумма - среднее
        запрос__С

Задача: расчет суммы депозита со сложными процентами
каждый месяц депозит увеличивается на некоторый процент (например, на 10%)
задание - расчитать годовой эффект (за 12 месяцев)

100 + 10% = 110
110 + 10% = 121
.....

?? Можно ли переставлять данные??
 (100 + 10%) + 20%  =?= (100 + 20%) + 10%
 +10% -> x1.1,  +20% -> x1.2
 (100 x 1.1) x 1.2  =?= (100 x 1.2) x 1.1 да, это равенство. Значит "складывать"
   проценты можно в произвольном порядке

-------------------------------------------------------------------------
Главная проблема многопоточного решения - в разделении во времени операций
чтения данных и их записи
double val = sum;  чтение
sum = val;         запись
!! разница времени существует в любом случае, даже если запись минимизировать
sum *= percent
все равно сначала происходит расчет sum * percent, затем результат сохраняется
в sum, только длится это очень короткое время. ОДНАКО вероятность ошибки остается

Решение - синхронизация. Операционная система предоставляет объекты синхронизации
(сигнальные объекты) - критическая секция, мьютекс, семафор. На уровне .NET
каждый ссылочный тип данных имеет в своем составе критическую секцию и может
использоваться для синхронизации.
Следующая проблема - при неправильной синхронизации теряется параллельность и все
потоки суть выстраиваются в очередь и выполняются один за одним.

